// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  first_name    String?   @default("")
  middle_name   String?   @default("")
  last_name     String?   @default("")
  email         String?   @unique
  phone_number  String?
  position      POSITION? @default(EMPLOYEE)
  emailVerified DateTime?
  image         String?

  company_president     Company[]         @relation("CompanyPresident")
  department_manager    Department[]      @relation("DepartmentManagerUser")
  department_supervisor Department[]      @relation("DepartmentSupervisorUser")
  companies             Company_User[]    @relation("CompanyUser")
  departments           Department_User[] @relation("DepartmentUser")

  user_account User_Account?

  requests               RequestionForm[] @relation("Requester")
  requests_verifier      RequestionFormCategory[] @relation("Verifier")
  user_approval          ApprovalUser[]   @relation("Approver")
  item_category_approval ItemCategory[]   @relation("SecondayApproval")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

enum POSITION {
  PRESIDENT
  MANAGER
  SUPERVISOR
  EMPLOYEE
}

model Company_User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  company_id String  @db.ObjectId
  company    Company @relation("Company", fields: [company_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String? @db.ObjectId
  user       User?   @relation("CompanyUser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("company_users")
}

model Department_User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  department_id String     @db.ObjectId
  department    Department @relation("Department", fields: [department_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id       String?    @db.ObjectId
  user          User?      @relation("DepartmentUser", fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("department_users")
}

model Company {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  short_name  String?
  description String?
  location    String?

  president    User?   @relation("CompanyPresident", fields: [president_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  president_id String? @db.ObjectId

  departments   Department[]
  company_users Company_User[] @relation("Company")

  requestion_forms RequestionForm[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("company")
}

model Department {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?

  company       Company? @relation(fields: [company_id], references: [id])
  company_id    String?  @db.ObjectId
  manager       User?    @relation("DepartmentManagerUser", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager_id    String?  @db.ObjectId
  supervisor    User?    @relation("DepartmentSupervisorUser", fields: [supervisor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisor_id String?  @db.ObjectId

  department_users Department_User[] @relation("Department")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("department")
}

model User_Account {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  username String  @unique
  password String?

  user    User?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id String   @unique @db.ObjectId
  role    Role[]   @relation(fields: [role_id], references: [id])
  role_id String[] @db.ObjectId

  sessions Session?
  notes    Notes[]

  // from next-auth
  type              String?
  provider          String?
  providerAccountId String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // @@unique([provider, providerAccountId])
  @@map("user_account")
}

model Role {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  permissions     Permission[]   @relation("RolePermissions")
  user_account_id String[]       @db.ObjectId
  user_account    User_Account[] @relation(fields: [user_account_id], references: [id])
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt

  @@map("role")
}

model Permission {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  module  MODULE
  view    Boolean @default(false)
  add     Boolean @default(false)
  edit    Boolean @default(false)
  delete  Boolean @default(false)
  verify  Boolean @default(false)
  role_id String  @db.ObjectId
  role    Role    @relation("RolePermissions", fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  scope VIEW_SCOPE @default(OWN)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("permission")
}

enum MODULE {
  USER_MANAGEMENT
  DEPARTMENT_MANAGEMENT
  COMPANY_MANAGEMENT
  ROLE_MANAGEMENT
  NOTE_MANAGEMENT
  REQUESTION_MANAGEMENT
  REQUESTION_CATEGORY_MANAGEMENT
  SUPPLIER_MANAGEMENT
  ITEM_CATEGORY_MANAGEMENT
  UNIT_OF_MEASUREMENT_MANAGEMENT
  APPROVAL_MANAGEMENT
}

enum VIEW_SCOPE {
  ALL
  DEPARTMENT
  COMPANY
  OWN
  NON_FOOD
  FOOD
  GSD
}

model Session {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token  String?  @unique
  refresh_token String?  @unique
  reset_token   String?
  isLoggedOut   Boolean  @default(false)
  expires_in    DateTime

  user_account_id String?       @unique @db.ObjectId
  user_account    User_Account? @relation(fields: [user_account_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("session")
}

model Notes {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  logs        String?

  user_account_id String?       @db.ObjectId
  user_account    User_Account? @relation(fields: [user_account_id], references: [id])

  requestion_forms_id String?         @db.ObjectId
  requestion_forms    RequestionForm? @relation(fields: [requestion_forms_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("notes")
}

model RequestionForm {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String

  //Whoe is requesting
  user_id          String?   @db.ObjectId
  requester        User?     @relation("Requester", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  // what are the items
  items            Item[]
  //Who is the approver
  approval_id      String?   @db.ObjectId
  approval         Approval? @relation("ApproverList", fields: [approval_id], references: [id])

  status REQUESTION_STATUS @default(PENDING)

  requestForm_category_id String?                 @db.ObjectId
  requestForm_category    RequestionFormCategory? @relation(fields: [requestForm_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  company_id              String?                 @db.ObjectId
  company                 Company?                @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notes               Notes[]
  CheckOutRequestForm CheckOutRequestForm?

  isVerified Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("requestion_forms")
}

enum REQUESTION_STATUS {
  DRAFT
  PENDING
  VERIFY
  REJECTED
  FIRST_APPROVAL
  SECOND_APPROVAL
  LAST_APPROVAL
  ONGOING
  COMPLETED
}

model RequestionFormCategory {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  short_name       String?

  requestion_forms RequestionForm[]

  user_verifier_id String? @db.ObjectId
  user_verifier    User?   @relation("Verifier", fields: [user_verifier_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  @@map("requestion_form_category")
}

model Item {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  quantity    Int
  price       Float
  total_price Float

  unit_of_measurement_id String?            @db.ObjectId
  unit_of_measurement    UnitOfMeasurement? @relation(fields: [unit_of_measurement_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item_category_id       String?            @db.ObjectId
  item_category          ItemCategory?      @relation(fields: [item_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  supplier_id            String?            @db.ObjectId
  supplier               Supplier?          @relation(fields: [supplier_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  requestion_forms_id    String?            @db.ObjectId
  requestion_forms       RequestionForm?    @relation(fields: [requestion_forms_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  item_status ITEM_STATUS @default(PENDING)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("item")
}

enum ITEM_STATUS {
  DONE
  PENDING
}

model Supplier {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  address        String?
  contact_person String?
  contact_number String?
  email          String?

  items Item[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("supplier")
}

model ItemCategory {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  description      String?
  //user approval fo this category
  user_approval_id String? @db.ObjectId
  user_approval    User?   @relation("SecondayApproval", fields: [user_approval_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  approvalUser ApprovalUser[]
  items        Item[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("item_category")
}

model UnitOfMeasurement {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  symbol            String?
  base_unit         String?
  conversion_factor Float?
  result_unit       String?
  items             Item[]
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("unit_of_measurement")
}

model Approval {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String?
  user_approval    ApprovalUser[]
  requestion_forms RequestionForm[] @relation("ApproverList")
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt

  @@map("approval")
}

model ApprovalUser {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  level            Int? // Indicates the level of approval, e.g., 1 for first, 2 for second, etc.
  approver_id      String?       @db.ObjectId
  approver         User?         @relation("Approver", fields: [approver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  item_category_id String?       @db.ObjectId
  item_category    ItemCategory? @relation(fields: [item_category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  approval_id      String       @db.ObjectId
  approval         Approval?      @relation(fields: [approval_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt

  @@map("approval_user")
}

model CheckOutRequestForm {
  id                  String          @id @default(auto()) @map("_id") @db.ObjectId
  requestion_forms_id String?         @unique @db.ObjectId
  requestion_forms    RequestionForm? @relation(fields: [requestion_forms_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt

  @@map("checkout_request_form")
}
